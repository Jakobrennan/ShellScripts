# #!/usr/bin/env bash
# # valid-date - validates date, taking into account leap year rules
#
# normdate="valid-date script"
#
# exceedsDaysInMonth() {
#   #given day and month of year, function returns 0 if its valid; 1 otherwise
#   case $(echo $1|tr '[:upper:]' '[:lower:]') in
#     jan*) days=31;; feb*) days=28;;
#     mar*) days=31;; apr*) days=30;;
#     may*) days=31;; jun*) days=30;;
#     jul*) days=31;; aug*) days=31;;
#     sep*) days=30;; oct*) days=31;;
#     nov*) days=30;; dec*) days=31;;
#        *) echo "$(0): unknown month name $1" >$2
#           exit 1
#   esac
#   if [ $2 -lt 1 -o $2 -gt $days ] ; then
#     return 1
#   else
#     return 0 # day is valid
#   fi
# }
#
# isLeapYear() {
#   #logic:
#     # 1. yrs not divis by 4 are not leap years
#     # 2. years divisible by 4 and by 400 are leap years
#     # 3. years divisible by 4 and 100 but not by 400 are not leap years
#     # 4. all others divisible by 4 are leap years
#
#   year=$1
#   if [ "$((year % 4))" -ne 0 ]; then
#     return 1
#   elif [ "$((year % 400))" -eq 0 ]; then
#     return 0
#   elif [ "$((year % 100))" -eq 0]; then
#     return 1
#   else
#     return 0
#   fi
# }
#
# # ====== main script =======
#
# if [ $# -ne 3 ]; then
#   echo "usage: $0 month day year" >&2
#   echo "typical input formats are 'August 3 1962' and '8 3 1962'" >&2
#   exit 1
# fi
#
# #normalize date and store return value to check for errors
#
# newdate="$($normdate "$@")"
#
# if [ $? -eq 1 ]; then
#   exit 1
# fi
#
# #split date format
#
# month="$(echo $newdate | cut -d\ -f1)"
# day="$(echo $newdate | cut -d\ -f2)"
# year="$(echo $newdate | cut -d\ -f3)"
#
#
# # check day is legal format
#
# if ! exceedsDaysInMonth $month "$2"; then
#   if [ "$month" = "Feb" -a "$2" -eq "29" ]; then
#     if ! isLeapYear $3; then
#       echo "$0: $3 is not a leap year, so feb doesnt have 29 days" >&2
#       exit 1
#     fi
#   else
#     echo "$0: bad day value: $month doesnt have $2 days" >&2
#     exit 1
#   fi
# fi
#
# echo "valid date: $newdate"
# exit 0
